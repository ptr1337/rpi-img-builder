source_dir(){
mkdir -p ${SRC}
cp -f soc.txt ${SRC}/
cd ${SRC}
}

clean_source(){
if ls ${KERNEL}-${VERSION} > /dev/null 2>&1;
	then echo "" && echo -e "${PNK}Cleaning${FIN} ..." && rm -fdr ${KERNEL}-${VERSION};
fi
}

noinitrd(){
sed -i 's/export INITRD=$want_initrd/export INITRD=No/g' scripts/package/builddeb
sed -i 's/export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)/export INITRD=No/g' scripts/package/builddeb
}

rpi0+1(){
sed -i 's/packageversion=$version-$revision/packageversion=$version-$revision~rpi0+1/g' scripts/package/mkdebian
}

rpi2+3(){
sed -i 's/packageversion=$version-$revision/packageversion=$version-$revision~rpi2+3/g' scripts/package/mkdebian
}

rpi4(){
sed -i 's/packageversion=$version-$revision/packageversion=$version-$revision~rpi4/g' scripts/package/mkdebian
}

userpatches(){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done ;
else echo -e "${YLW}No user patches found${FIN}." 
fi
}

rpi4_binaries(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p binaries
rm -f binaries/*
cd binaries
echo
echo_bins
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup4.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup4cd.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup4db.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup4x.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start4.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start4cd.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start4db.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start4x.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}LICENCE.broadcom
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}COPYING.linux
cd ..
if ls binaries/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1
	then echo_bdone;
	else echo_fail && exit;
fi
}

rpi_binaries(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p binaries
rm -f binaries/*
cd binaries
echo
echo_bins
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}bootcode.bin
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup_cd.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup_db.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}fixup_x.dat
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start_cd.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start_db.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}start_x.elf
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}LICENCE.broadcom
aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false ${BINURL}COPYING.linux
cd ..
if ls binaries/{bootcode.bin,fixup.dat,fixup_cd.dat,fixup_db.dat,fixup_x.dat,start.elf,start_cd.elf,start_db.elf,start_x.elf} > /dev/null 2>&1
	then echo_bdone;
	else echo_fail && exit;
fi
}

download(){
echo
echo_kernel
if ls ${KERNEL}-${VERSION}.tar.gz > /dev/null 2>&1;
	then echo -e "${YLW}${KERNEL}-${VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/raspberrypi/linux/archive/rpi-${VERSION}.tar.gz && echo_bdone;
fi
}

extract(){
echo
echo_extract
echo -e -n "${WHT}"
pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
echo -e -n "${FIN}"
}

# armv6l
armv6_setup(){
cd ${KERNEL}-${VERSION}
export ARCH=arm
KERNEL=kernel
#make clean
#make mrproper
}

armv6_cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/arm/configs/
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make KBUILD_DEBARCH=armel ARCH=arm CC=${ARMV6_CROSS} CROSS_COMPILE=arm-linux-gnueabi- ${MYCONFIG};
	else make KBUILD_DEBARCH=armel ARCH=arm CC=${NATIVE} ${MYCONFIG};
fi
echo_done
}

armv6_menuconfig(){
echo
echo_menuconfig
sleep 1s
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make KBUILD_DEBARCH=armel ARCH=arm CC=${ARMV6_CROSS} CROSS_COMPILE=arm-linux-gnueabi- menuconfig;
	else make KBUILD_DEBARCH=armel ARCH=arm CC=${NATIVE} menuconfig;
fi
}

armv6_ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_DEBARCH=armel KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${ARMV6_CROSS} CROSS_COMPILE=arm-linux-gnueabi- bindeb-pkg
}

armv6_ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_DEBARCH=armel KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${NATIVE} bindeb-pkg
}

# armhf
armv7_setup(){
cd ${KERNEL}-${VERSION}
export ARCH=arm
if `grep -Fx "bcm2711" "../soc.txt" >/dev/null;`
	then KERNEL=kernel7l;
fi
if `grep -Fx "bcm2710" "../soc.txt" >/dev/null;`
	then KERNEL=kernel7;
fi
}

armv7_cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/arm/configs/
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- ${MYCONFIG};
	else make ARCH=arm CC=${NATIVE} ${MYCONFIG};
fi
echo_done
}

armv7_menuconfig(){
echo
echo_menuconfig
sleep 1s
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- menuconfig;
	else make ARCH=arm CC=${NATIVE} menuconfig;
fi
}

armv7_ccompile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg
}

armv7_ncompile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${NATIVE} bindeb-pkg
}

ccpatch(){
    echo
    echo_ccpatch
    userpatches
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
    if `grep -Fx "bcm2711" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${CC}/rpi4b-packaging.patch && rpi4;
    fi
    if `grep -Fx "bcm2710" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${CC}/rpi3b-packaging.patch && rpi2+3;
    fi
    if `grep -Fx "bcm2708" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${CC}/rpi-packaging.patch && rpi0+1;
    fi
    cp -f ../${PAT}/headers-byteshift.patch headers-byteshift.patch
    echo_done
    echo
}

ncpatch(){
    echo
    echo_ncpatch
    userpatches
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
    if `grep -Fx "bcm2711" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${NC}/rpi4b-packaging.patch && rpi4;
    fi
    if `grep -Fx "bcm2710" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${NC}/rpi3b-packaging.patch && rpi2+3;
    fi
    if `grep -Fx "bcm2708" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${NC}/rpi-packaging.patch && rpi0+1;
    fi
    echo_done
    echo
}

module_sig(){
echo CONFIG_MODULE_SIG=y >> arch/arm/configs/bcm2711_defconfig
echo CONFIG_MODULE_SIG_KEY='"'certs/signing_key.pem'"' >> arch/arm/configs/bcm2711_defconfig
echo CONFIG_MODULE_SIG=y >> arch/arm/configs/bcm2709_defconfig
echo CONFIG_MODULE_SIG_KEY='"'certs/signing_key.pem'"' >> arch/arm/configs/bcm2709_defconfig
echo CONFIG_MODULE_SIG=y >> arch/arm/configs/bcmrpi_defconfig
echo CONFIG_MODULE_SIG_KEY='"'certs/signing_key.pem'"' >> arch/arm/configs/bcmrpi_defconfig
}

rpi4_fconfig(){
echo -e "${RED}Making bcm2711 defconfig${FIN}."
module_sig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- bcm2711_defconfig &> /dev/null;
	else make ARCH=arm CC=${NATIVE} bcm2711_defconfig &> /dev/null;
fi
echo_done
}

rpi3_fconfig(){
echo -e "${RED}Making bcm2709 defconfig${FIN}."
module_sig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- bcm2709_defconfig &> /dev/null;
	else make ARCH=arm CC=${NATIVE} bcm2709_defconfig &> /dev/null;
fi
echo_done
}

rpi_fconfig(){
echo -e "${RED}Making bcmrpi defconfig${FIN}."
module_sig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make KBUILD_DEBARCH=armel ARCH=arm CC=${ARMV6_CROSS} CROSS_COMPILE=arm-linux-gnueabi- bcmrpi_defconfig &> /dev/null;
	else make KBUILD_DEBARCH=armel ARCH=arm CC=${NATIVE} bcmrpi_defconfig &> /dev/null;
fi
echo_done
}

choose_rpi4_defconfig(){
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_cconfig
    ;;
  1)
    rpi4_fconfig
    ;;
esac
}

choose_rpi3_defconfig(){
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_cconfig
    ;;
  1)
    rpi3_fconfig
    ;;
esac
}

choose_rpi_defconfig(){
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv6_cconfig
    ;;
  1)
    rpi_fconfig
    ;;
esac
}

choose_v7_menuconfig(){
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then armv7_menuconfig
fi
}

choose_v6_menuconfig(){
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then armv6_menuconfig
fi
}

choose_v7_compile(){
case `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_ccompile
    ;;
  1)
    armv7_ncompile
    ;;
esac
}

choose_v6_compile(){
case `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv6_ccompile
    ;;
  1)
    armv6_ncompile
    ;;
esac
}

bcm2711_check(){
if ls ${OUT4}/*.deb > /dev/null 2>&1
	then mkdir -p ${OUT4}/tmp && mv -f ${OUT4}/*.deb ${OUT4}/tmp;
fi
}

bcm2710_check(){
if ls ${OUT3}/*.deb > /dev/null 2>&1
	then mkdir -p ${OUT3}/tmp && mv -f ${OUT3}/*.deb ${OUT3}/tmp;
fi
}

bcm2708_check(){
if ls ${OUT}/*.deb > /dev/null 2>&1
	then mkdir -p ${OUT}/tmp && mv -f ${OUT}/*.deb ${OUT}/tmp;
fi
}
