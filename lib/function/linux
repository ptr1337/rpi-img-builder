DOWNLOAD="aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false"
STBURL="https://cdn.kernel.org/pub/linux/kernel/v5.x/"
MLURL="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/"

source_dir(){
mkdir -p ${SRC}
cp -f soc.txt ${SRC}/
cd ${SRC}
}

mainline_clean(){
if ls ${MLKERNEL}-${VERSION} > /dev/null 2>&1;
	then echo "" && echo -e "${PNK}Cleaning${FIN} ..." && rm -fdr ${MLKERNEL}-${VERSION};
fi
}

rpi4_binaries(){
BINURL="https://github.com/raspberrypi/firmware/raw/master/boot/"
mkdir -p binaries
rm -f binaries/*
cd binaries
echo
echo_bins
${DOWNLOAD} ${BINURL}fixup4.dat
${DOWNLOAD} ${BINURL}fixup4cd.dat
${DOWNLOAD} ${BINURL}fixup4db.dat
${DOWNLOAD} ${BINURL}fixup4x.dat
${DOWNLOAD} ${BINURL}start4.elf
${DOWNLOAD} ${BINURL}start4cd.elf
${DOWNLOAD} ${BINURL}start4db.elf
${DOWNLOAD} ${BINURL}start4x.elf
${DOWNLOAD} ${BINURL}LICENCE.broadcom
${DOWNLOAD} ${BINURL}COPYING.linux
cd ..
if ls binaries/{fixup4.dat,fixup4cd.dat,fixup4db.dat,fixup4x.dat,start4.elf,start4cd.elf,start4db.elf,start4x.elf} > /dev/null 2>&1
	then echo_bdone;
	else echo_fail && exit;
fi
}

download_mainline(){
echo
echo_mainline
if ls ${MLKERNEL}-${VERSION}.tar.gz > /dev/null 2>&1;
	then echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.gz found${FIN}.";
	else ${DOWNLOAD} ${MLURL}${MLKERNEL}-${VERSION}.tar.gz && echo_bdone;
fi
echo
echo_extract
echo -e -n "${WHT}"
pv ${MLKERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
echo -e -n "${FIN}"
cd ${MLKERNEL}-${VERSION}
rpi4_binaries
export ARCH=arm
}

download_stable(){
echo
echo_stable
if ls ${MLKERNEL}-${VERSION}.tar.xz > /dev/null 2>&1;
	then echo -e "${YLW}${MLKERNEL}-${VERSION}.tar.xz found${FIN}.";
	else ${DOWNLOAD} ${STBURL}${MLKERNEL}-${VERSION}.tar.xz && echo_bdone;
fi
echo
echo_extract
echo -e -n "${WHT}"
pv ${MLKERNEL}-${VERSION}.tar.xz | tar -xJ ${MLKERNEL}-${VERSION}
echo -e -n "${FIN}"
cd ${MLKERNEL}-${VERSION}
rpi4_binaries
export ARCH=arm
}

userpatches(){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done ;
else echo -e "${YLW}No user patches found${FIN}." 
fi
}

patching(){
echo
echo_patch
userpatches
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PAT}/builddeb scripts/package/
cp -R ../${PAT}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then patch -p1 < ../${ML}/rpi4b-cc-packaging.patch;
	else patch -p1 < ../${ML}/rpi4b-nc-packaging.patch;
fi
if ls ../${ML}/misc/*.patch > /dev/null 2>&1;
	then for i in ../${ML}/misc/*.patch; do patch -p1 < $i; done;
fi	
cp -f ../${PAT}/headers-byteshift.patch headers-byteshift.patch;
echo_done
echo
}

cconfig(){
echo_cconfig
cp -f ../${DEF}/${MYCONFIG} arch/arm/configs/
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- ${MYCONFIG};
	else make ARCH=arm CC=${NATIVE} ${MYCONFIG};
fi
echo_done
}

rpi_config(){
echo_fconfig
cp -f ../${DEF}/bcm2711_defconfig arch/arm/configs/
echo CONFIG_MODULE_SIG=y >> arch/arm/configs/bcm2711_defconfig
echo CONFIG_MODULE_SIG_KEY='"'certs/signing_key.pem'"' >> arch/arm/configs/bcm2711_defconfig
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- bcm2711_defconfig &> /dev/null;
	else make ARCH=arm CC=${NATIVE} bcm2711_defconfig &> /dev/null;
fi
echo_done
}

menu_config(){
echo
echo_menuconfig
sleep 1s
if `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null;`
	then make ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- menuconfig;
	else make ARCH=arm CC=${NATIVE} menuconfig;
fi
}

cross_compile(){
echo -e "-- ${GRN}CC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${ARMV7_CROSS} CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg
rm -f ../*libc*.deb
}

native_compile(){
echo -e "-- ${GRN}NC${FIN}"
echo_build
echo 'y' | make -j${CORES} KBUILD_BUILD_HOST=${KBHOST} ARCH=arm CC=${NATIVE} bindeb-pkg
rm -f ../*libc*.deb
}

bcm2711_check(){
if ls ${OUT4}/*.deb > /dev/null 2>&1
	then mkdir -p ${OUT4}/tmp && mv -f ${OUT4}/*.deb ${OUT4}/tmp;
fi
}
