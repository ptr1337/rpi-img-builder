# Stage1
qemu_arm64(){
mkdir -p p2/usr/bin
cp $(which "qemu-aarch64-static") p2/usr/bin
}

qemu_arm64_remove(){
rm p2/usr/bin/qemu-aarch64-static
}

# Stage 2
set_locales(){
apt install -y locales
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8
locale-gen en_US.UTF-8
}

set_timezone(){
ln -snf /usr/share/zoneinfo/America/New_York /etc/localtime
echo -n 'America/New_York' > /etc/timezone
}

# EEPROM
find_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==1) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]];
	then download_eeprom; else finding_eeprom;
fi
}

finding_eeprom(){
EEPROM_VERSION=$(curl --silent -L ${CHANGELOG} | awk '{if (NR==10) {print substr($2, 1, length($2)-3)}}' | sed 's/[()]//g')
if [[ `wget -S --spider ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz 2>&1 | grep 'HTTP/1.1 200 OK'` ]];
	then download_eeprom; else EEPROM_VERSION="12.3" && download_eeprom;
fi
}

download_eeprom(){
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress ${ERURL}rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
}

bcm2711_eeprom(){
ERURL="https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/"
CHANGELOG="https://raw.githubusercontent.com/raspberrypi/rpi-eeprom/debian/buster/debian/changelog"
echo
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo Installing rpi-eeprom.
sleep 1s
apt install help2man rsync pciutils -y
###
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
find_eeprom
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo Done.
}

# Userland
rpi_userland(){
echo
echo Adding raspi userland.
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
./buildme --aarch64
cd ~
rm -f -d -R userland
ldconfig
echo Done.
}

# Modules
bcm_modules(){
echo
echo Updating etc modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
echo Done.
}

bcm2710_modules(){
echo
echo Updating etc modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev
snd_bcm2835

EOF
chown root:root /etc/modules
echo Done.
}

# Zramswap setup
zramswap_config(){
sed -i 's/#ALLOCATION=256/ALLOCATION=1024/g' /etc/default/zramswap
sed -i 's/#SIZE=256/SIZE=1024/g' /etc/default/zramswap
sed -i 's/#PRIORITY=100/PRIORITY=100/g' /etc/default/zramswap
}

# Fetch kernel version
fetch_version(){
echo 'INSTALLED_KERNEL="' > /root/kernel1
cat /usr/src/linux-headers*/include/config/kernel.release > /root/kernel2
echo '"' > /root/kernel3
paste -d '\0' kernel1 kernel2 kernel3  > /root/kernel.txt
rm -f kernel1 kernel2 kernel3
if `grep -Fx "ext4=1" "/root/userdata.txt" >/dev/null;`
	then echo FSTYPE='"'ext4'"' >> /root/kernel.txt;
fi
if `grep -Fx "btrfs=1" "/root/userdata.txt" >/dev/null;`
	then echo FSTYPE='"'btrfs'"' >> /root/kernel.txt;
fi
}

# User scripts
uscripts_stage1(){
mkdir -p p2/root/userscripts
cp -f files/userscripts/* p2/root/userscripts/
rm -f p2/root/userscripts/README.md
}

uscripts_stage2(){
echo
echo -e "\e[1;33mAdding user scripts\e[0m."
mkdir -p /usr/local/bin
cp -f userscripts/* /usr/local/bin/
rm -fdr userscripts 
chmod +x /usr/local/bin/*
sleep 1s
echo -e "\e[1;33mDone\e[0m."
echo
}

# Firmware
extra_firmware(){
echo
echo Adding extra firmware.
sleep 1s
mkdir -p /lib/firmware/brcm
mkdir -p /lib/firmware/updates
git clone https://github.com/pyavitz/firmware.git /lib/firmware/updates/brcm
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /lib/firmware/updates/renesas_usb_fw.mem
rm -f UPDATE.mem
ln -sr /lib/firmware /etc/firmware
mkdir -p /lib/firmware/updates/rtl_nic
cd /lib/firmware/updates/rtl_nic
wget -cq --show-progress https://kernel.googlesource.com/pub/scm/linux/kernel/git/firmware/linux-firmware.git/+archive/refs/heads/master/rtl_nic.tar.gz
tar xf rtl_nic.tar.gz
rm -f rtl_nic.tar.gz
cd ~
echo Done.
}

# Initrd script
initrd_script(){
cd ~
echo
echo Adding initrd script.
mkdir -p /etc/initramfs/post-update.d/
mv -f 99-initrd /etc/initramfs/post-update.d/
chmod +x /etc/initramfs/post-update.d/99-initrd
chown root:root /etc/initramfs/post-update.d/99-initrd
}

# Defrag partition
defrag_p2(){
if `grep -Fx "ext4=1" "userdata.txt" >/dev/null;`
	then e4defrag -c p2;
fi
if `grep -Fx "btrfs=1" "userdata.txt" >/dev/null;`
	then btrfs filesystem defragment -f -r p2;
fi
}

# Shrink
ext4_shrink(){
if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then shrink;
	else start_shrink;
fi
}

start_shrink(){
echo
echo_shrink
shrink > /dev/null 2>&1
echo_done
}

shrink(){
echo
chmod +x scripts/shrink
scripts/shrink -s ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img
echo
fix_cmdline
}

fix_cmdline(){
echo 'LOOP1="/dev/mapper/' > kpart1
echo 'LOOP2="/dev/mapper/' >> kpart1
IMAGE_FILE="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
kpartx="$(kpartx -av $IMAGE_FILE)"
echo "$kpartx"
grep -o 'loop.p.' <<<"$kpartx" > kpart2
echo '"' > kpart3
echo '"' >> kpart3
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
BOOT="${LOOP1}"
mkdir -p p1
sleep 1s
mount "${BOOT}" p1
rm -f p1/cmdline.txt
new_partuuid
cmdline
sleep 1s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}

new_partuuid(){
rm -f part-uuid.txt
ROOTFS="${LOOP2}"
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' > part-uuid.txt

source part-uuid.txt
}

# Systemd services
firstboot_service(){
echo
echo Creating first boot.
sleep 1s
tee /etc/systemd/system/firstboot.service <<EOF
[Unit]
Description=First Boot
After=systemd-remount-fs.service
Before=credentials.service
ConditionPathExists=/usr/local/sbin/firstboot

[Service]
ExecStart=/etc/init.d/firstboot start > /dev/null 2>&1
Type=oneshot
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
}

credentials_service(){
echo
echo Creating wifi credentials.
sleep 1s
tee /etc/systemd/system/credentials.service <<EOF
[Unit]
Description=Credentials
After=firstboot.service network.target
Before=rc-local.service
ConditionPathExists=/usr/local/bin/credentials
[Service]
ExecStart=/usr/local/bin/credentials > /dev/null 2>&1
Type=oneshot
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target
EOF
}

governor_service(){
echo
echo Creating governor service.
sleep 1s
tee /etc/systemd/system/governor.service <<EOF
[Unit]
Description=Set Governor
ConditionPathExists=/usr/local/bin/governor

[Service]
ExecStart=/usr/local/bin/governor -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
}

# PIANOBAR AND BLUETOOTH
piano_bar(){
git clone https://github.com/PromyLOPh/pianobar.git
cd pianobar
make -j4
make install
cd ~
rm -fdr pianobar
}

libao_conf(){
rm -f /etc/libao.conf
tee /etc/libao.conf <<EOF
default_driver=alsa
buffer_time=1300
quiet
EOF
chown root:root /etc/libao.conf
}

stereo_audio(){
rm -f /usr/share/pulseaudio/alsa-mixer/profile-sets/default.conf
mv -f default.conf /usr/share/pulseaudio/alsa-mixer/profile-sets/
chown root:root /usr/share/pulseaudio/alsa-mixer/profile-sets/default.conf
}

sed_configs(){
sed -i '/#Name = BlueZ/a Enable=Source,Sink,Media' /etc/bluetooth/main.conf
sed -i 's/#Class = 0x000100/Class = 0x00041C/g' /etc/bluetooth/main.conf
sed -i 's/#DiscoverableTimeout = 0/DiscoverableTimeout = 0/g' /etc/bluetooth/main.conf
sed -i 's/#PairableTimeout = 0/PairableTimeout = 0/g' /etc/bluetooth/main.conf
sed -i 's/; resample-method = speex-float-1/resample-method = trivial/g' /etc/pulse/daemon.conf
}

pulseaudio_init(){
mv -f pulseaudio.init /etc/init.d/pulseaudio
chmod 755 /etc/init.d/pulseaudio
update-rc.d pulseaudio defaults
}

autopair_service(){
mv -f auto-agent autopair bluezutils.py bluezutils.pyc BtAutoPair.py BtAutoPair.pyc testAutoPair.py /usr/local/bin/
chmod +x /usr/local/bin/auto-agent
chmod +x /usr/local/bin/autopair
chown -R root:root /usr/local/bin/
tee /etc/systemd/system/autopair.service <<EOF
[Unit]
Description=Auto Pair
Requires=bluetooth.service
After=bluetooth.service
Before=rc-local.service
ConditionPathExists=/usr/local/bin/autopair

[Service]
ExecStart=/usr/local/bin/autopair > /dev/null 2>&1
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
systemctl enable autopair
}
