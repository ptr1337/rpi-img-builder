# Stage1
qemu_arm(){
mkdir -p p2/usr/bin
cp $(which "qemu-arm-static") p2/usr/bin
}

qemu_arm_remove(){
rm p2/usr/bin/qemu-arm-static
}

# Stage 2
set_locales(){
apt install -y locales
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=C.UTF-8
locale-gen en_US.UTF-8
}

set_timezone(){
ln -snf /usr/share/zoneinfo/America/New_York /etc/localtime
echo -n 'America/New_York' > /etc/timezone
}

root_password(){
echo "root:toor" | chpasswd
}

# EEPROM
bcm2711_eeprom(){
echo
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo Checking for updates.
apt update
echo
echo Installing rpi-eeprom.
sleep 1s
apt install help2man rsync pciutils -y
###
mkdir -p ~/eeprom
mv -f rpi-eeprom-update.patch /root/eeprom/
mv -f rpi-eeprom-control.patch /root/eeprom/
cd ~/eeprom
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch 
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -nc -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo Done.
}

# Userland
rpi_userland(){
echo
echo Adding raspi userland.
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
./buildme
cd ~
rm -f -d -R userland
ldconfig
echo Done.
}

# Modules
bcm_modules(){
echo
echo Updating etc modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev

EOF
chown root:root /etc/modules
echo Done.
}

bcm2710_modules(){
echo
echo Updating etc modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2
#i2c-dev
snd_bcm2835

EOF
chown root:root /etc/modules
echo Done.
}

# Zramswap setup
zramswap_config(){
sed -i 's/#ALLOCATION=256/ALLOCATION=1024/g' /etc/default/zramswap
sed -i 's/#SIZE=256/SIZE=1024/g' /etc/default/zramswap
sed -i 's/#PRIORITY=100/PRIORITY=100/g' /etc/default/zramswap
}

# Fetch kernel version
fetch_version(){
echo 'INSTALLED_KERNEL="' > /root/kernel1
cat /usr/src/linux-headers*/include/config/kernel.release > /root/kernel2
echo '"' > /root/kernel3
paste -d '\0' kernel1 kernel2 kernel3  > /root/kernel.txt
rm -f kernel1 kernel2 kernel3
}

# User scripts
uscripts_stage1(){
mkdir -p p2/root/userscripts
cp -f files/userscripts/* p2/root/userscripts/
rm -f p2/root/userscripts/README.md
}

uscripts_stage2(){
echo
echo -e "\e[1;33mAdding user scripts\e[0m."
mkdir -p /usr/local/bin
cp -f userscripts/* /usr/local/bin/
rm -fdr userscripts 
chmod +x /usr/local/bin/*
sleep 1s
echo -e "\e[1;33mDone\e[0m."
echo
}

# Firmware
bluez_firmware(){
BRPT="rpt8"
echo Building bluez firmware package.
sleep 1s
mkdir -p bluez-firmware
cd bluez-firmware
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/b/bluez-firmware/bluez-firmware_1.2.orig.tar.gz
tar xf bluez-firmware_1.2.orig.tar.gz
cd bluez-firmware-1.2
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/b/bluez-firmware/bluez-firmware_1.2-4+${BRPT}.debian.tar.xz
tar xf bluez-firmware_1.2-4+${BRPT}.debian.tar.xz
rm -f bluez-firmware_1.2-4+${BRPT}.debian.tar.xz
dpkg-buildpackage -us -uc
cd ..
dpkg -i bluez-firmware_*.deb
cd ~
rm -fdR bluez-firmware
}

brcm_firmware(){
WRPT="rpt11"
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/f/firmware-nonfree/firmware-brcm80211_20190114-1+${WRPT}_all.deb
dpkg -i firmware-brcm80211_20190114-1+${WRPT}_all.deb
rm -f firmware-brcm80211_20190114-1+${WRPT}_all.deb
}

extra_firmware(){
echo
echo Adding extra firmware.
sleep 1s
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
install -Dm644 UPDATE.mem /lib/firmware/renesas_usb_fw.mem
rm -f UPDATE.mem
echo Done.
}

# https://community.cypress.com/gfawx74859/attachments/gfawx74859/resourcelibrary/966/1/cypress-fmac-v4.14.77-2020_0115.zip
cypress_firmware(){
echo
echo Adding brcm firmware from cypress.
sleep 1s
mkdir cypress
cd cypress
wget -cq --show-progress https://github.com/pyavitz/binary/releases/download/060420/cypress-fmac-v4.14.77-2020_0115.zip
unzip -qq cypress-fmac-v4.14.77-2020_0115.zip
tar -xf cypress-firmware-v4.14.77-2020_0115.tar.gz
#rm -f firmware/*pcie*
cp -f firmware/* /lib/firmware/brcm/
cd ~
rm -fdr cypress
echo Done.
}

# Initrd script
initrd_script(){
cd ~
echo
echo Adding initrd script.
mkdir -p /etc/initramfs/post-update.d/
mv -f 99-initrd /etc/initramfs/post-update.d/
chmod +x /etc/initramfs/post-update.d/99-initrd
chown root:root /etc/initramfs/post-update.d/99-initrd
}

# Systemd services
firstboot_service(){
echo
echo Creating first boot.
sleep 1s
tee /etc/systemd/system/firstboot.service <<EOF
[Unit]
Description=First Boot
After=systemd-remount-fs.service
Before=credentials.service
ConditionPathExists=/usr/local/sbin/firstboot

[Service]
ExecStart=/etc/init.d/firstboot start > /dev/null 2>&1
Type=oneshot
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF
}

credentials_service(){
echo
echo Creating wifi credentials.
sleep 1s
tee /etc/systemd/system/credentials.service <<EOF
[Unit]
Description=Credentials
After=firstboot.service network.target
Before=rc-local.service
ConditionPathExists=/usr/local/bin/credentials
[Service]
ExecStart=/usr/local/bin/credentials > /dev/null 2>&1
Type=oneshot
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target
EOF
}

governor_service(){
echo
echo Creating governor service.
sleep 1s
tee /etc/systemd/system/governor.service <<EOF
[Unit]
Description=Set Governor
ConditionPathExists=/usr/local/bin/governor

[Service]
ExecStart=/usr/local/bin/governor -r &>/dev/null
Type=oneshot
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
}

### Finish
# Shrink
start_shrink(){
echo
echo_shrink
shrink > /dev/null 2>&1
echo_done
}

shrink(){
chmod +x scripts/shrink
scripts/shrink -s ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img
fix_cmdline
}

fix_cmdline(){
echo 'LOOP1="/dev/mapper/' > kpart1
echo 'LOOP2="/dev/mapper/' >> kpart1
IMAGE_FILE="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img"
kpartx="$(kpartx -av $IMAGE_FILE)"
echo "$kpartx"
grep -o 'loop.p.' <<<"$kpartx" > kpart2
echo '"' > kpart3
echo '"' >> kpart3
paste -d '\0' kpart1 kpart2 kpart3 > kpart.txt
rm -f {kpart1,kpart2,kpart3}
source kpart.txt
BOOT="${LOOP1}"
mkdir -p p1
sleep 1s
mount "${BOOT}" p1
rm -f p1/cmdline.txt
new_partuuid
cmdline
sleep 1s
umount p1
rm -fdr p1
kpartx -d ${IMAGE_FILE}
rm -f kpart.txt
}

new_partuuid(){
rm -f part-uuid.txt
ROOTFS="${LOOP2}"
ROOT_PARTUUID=$(blkid -o export -- ${ROOTFS} | sed -ne 's/^PARTUUID=//p')
echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' > part-uuid.txt

source part-uuid.txt
}

# Rename and compress
rename_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
}

compress_image(){
source kernel.txt
mv -f ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${IMAGE_DATE}.img ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
xz -zev --threads=${CORES} ${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${IMAGE_DATE}.img
}
