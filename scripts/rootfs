#!/bin/bash
#AARCH64 ROOTFS
RED="\e[0;31m"
BRED="\e[1;31m"
GRN="\e[0;32m"
YLW="\e[1;33m"
GRY="\e[0;37m"
WHT="\e[1;37m"
FIN="\e[0m"
source userdata.txt > /dev/null 2>&1;
source lib/source
source lib/function/boot
UD=userdata.txt

userdata(){
echo ""
echo "Please create a userdata.txt file"
while [ true ] ; do
read -t 10 -n 1
if [ $? = 0 ] ; then
exit ;
else
echo "run make config"
fi
done
}

if [ -f "$UD" ]; then
    echo ""
    :;
else 
    userdata
fi

validation

devuan_rootfs(){
DEVUAN_RELEASE=devuan-${DISTRO_VERSION}-rootfs-aarch64.tar.xz
if ls $DEVUAN_RELEASE > /dev/null 2>&1; then exit; 
	else : ;
fi
wget -cq --show-progress https://github.com/pyavitz/rootfs-tarballs/releases/download/rootfs/devuan-${DISTRO_VERSION}-rootfs-aarch64.tar.xz
}

ubuntu_rootfs(){
UBUNTU_RELEASE=ubuntu-base-${DISTRO_VERSION}-base-aarch64.tar.gz
if ls $UBUNTU_RELEASE > /dev/null 2>&1; then exit; 
	else : ;
fi
wget -cq --show-progress http://cdimage.ubuntu.com/ubuntu-base/releases/${DISTRO_VERSION}/release/ubuntu-base-${DISTRO_VERSION}-base-arm64.tar.gz
mv -f ubuntu-base-${DISTRO_VERSION}-base-arm64.tar.gz ubuntu-base-${DISTRO_VERSION}-base-aarch64.tar.gz
}

if `grep -Fx "devuan=1" "userdata.txt" > /dev/null 2>&1;`
	then devuan_rootfs && exit;
fi
if `grep -Fx "ubuntu=1" "userdata.txt" > /dev/null 2>&1;`
	then ubuntu_rootfs && exit;
fi
if `grep -Fx "verbose=1" "userdata.txt" > /dev/null 2>&1;`
	then set -eux -o pipefail;
	else set -eu -o pipefail;
fi
RAM=0
PROXY=""
IMAGE_FOLDER="img/"
IMAGE_VERSION="rootfs-aarch64"
FILE=debian-${DISTRO_VERSION}-${IMAGE_VERSION}.tar.xz
if ls $FILE > /dev/null 2>&1; then exit; 
	else echo && echo -e "${GRN}Starting debootstrap${FIN} ...";
fi
echo -e -n ${RED}
IMAGE_FILE_SUFFIX="$(date +%F)"
IMAGE_FILE_NAME="debian-${DISTRO_VERSION}-${IMAGE_VERSION}.img"
if [ $RAM -ne 0 ]; then
	IMAGE_FOLDER="ram/"
fi
mkdir -p "$IMAGE_FOLDER"
if [ $RAM -ne 0 ]; then
	mount -t tmpfs -o size=1G tmpfs $IMAGE_FOLDER
fi
if `grep -Fx "verbose=1" "userdata.txt" >/dev/null;`
	then partition;
	else partition > /dev/null 2>&1;
fi
mkdir -p p1/etc/apt/apt.conf.d p1/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"
mkdir -p p1/usr/bin
cp $(which "qemu-aarch64-static") p1/usr/bin
if [ -n "$PROXY" ] ; then
    http_proxy="$PROXY" debootstrap --arch arm64 --foreign ${DISTRO_VERSION} p1
    http_proxy="$PROXY" chroot p1 /debootstrap/debootstrap --second-stage
else
    debootstrap --arch arm64 --foreign ${DISTRO_VERSION} p1
    chroot p1 /debootstrap/debootstrap --second-stage
fi
if [ -n "$PROXY" ] ; then
	tee "p1/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi

rm p1/usr/bin/qemu-aarch64-static

if [ -n "$PROXY" ] ; then
	rm p1/etc/apt/apt.conf.d/30proxy
fi
rm p1/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io

### Finish
echo
echo -e -n ${FIN}
echo -e -n ${GRY}
e4defrag -c p1
echo -e -n ${FIN}
echo
echo -e "${BRED}Archiving root filesystem${FIN} ..."
cd p1
echo -e -n ${WHT}
#tar cfJ ../debian-${DISTRO_VERSION}-${IMAGE_VERSION}.tar.xz *
XZ_DEFAULTS="--threads=${CORES}"; export XZ_DEFAULTS;tar cfJ - * | (pv -terb > ../debian-${DISTRO_VERSION}-${IMAGE_VERSION}.tar.xz)
echo -e -n ${FIN}
cd ..

umount p1

losetup -d "${IMAGE_LOOP_DEV}"
mv "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" "${IMAGE_FILE_NAME}"
if [ $RAM -ne 0 ]; then
	umount "${IMAGE_FOLDER}"
fi
rmdir "${IMAGE_FOLDER}"
rmdir p1
rm -f debian-${DISTRO_VERSION}-${IMAGE_VERSION}.img
clear
