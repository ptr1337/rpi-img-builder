#!/usr/bin/env bash
source /root/debian.txt
source /root/universal.txt
source /root/source.txt
source /root/userdata.txt
URL="https://raw.githubusercontent.com/pyavitz/scripts/master/"

set -o errexit
set -o pipefail
set -o nounset

echo 'nameserver 8.8.8.8' > /etc/resolv.conf
echo 'nameserver 8.8.4.4' >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils

### Locales
set_locales

### Timezone
set_timezone

apt upgrade -y
apt dist-upgrade -y
apt install -y ${DEBIAN1}

#### Scripts
echo
echo Moving scripts.
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
# Scripts
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then led_service
fi
if `grep -Fx "bcm2710" "/root/soc.txt" >/dev/null;`
	then led_service
fi
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
mv -f smon /usr/local/bin/
case `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null; echo $?` in
  0)
	wget -cq --show-progress ${URL}write2usb
	mv -f write2usb /usr/local/bin/
	wget -cq --show-progress ${URL}deb-eeprom
	mv -f deb-eeprom /usr/local/bin/
    ;;
esac
mv -f growpart /usr/bin/
mv -f credentials /usr/local/bin/
wget -cq --show-progress ${URL}swh
mv -f swh /usr/local/bin/
wget -cq --show-progress ${URL}governor
mv -f governor /usr/local/bin/
if `grep -Fx "userscripts=1" "/root/userdata.txt" >/dev/null;`
	then uscripts_stage2;
fi
initrd_script
# Service
mv -f firstboot.init /etc/init.d/firstboot
mv -f firstboot /usr/local/sbin/
chmod +x /usr/bin/growpart
chown root:root /usr/bin/growpart
chmod +x /etc/init.d/firstboot
chown root:root /etc/init.d/firstboot
chmod +x /usr/local/bin/*
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/bin/
chown -R root:root /usr/local/sbin/
echo Done.

#### MOTD
echo
echo Adding motd.
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${BRAND}'
echo 
EOF
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo Done.

#### Software
echo
echo Installing needed packages.
sleep 1s
apt -y clean
apt -y autoclean
apt update
apt install -y ${DEBIAN2} ${FIRMWARE}

#### Adding firmware
echo
echo Adding pi firmware.
sleep 1s
brcm_firmware
cd /lib/firmware/brcm
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then bcm_sdio_4-b
fi
if `grep -Fx "bcm2710" "/root/soc.txt" >/dev/null;`
	then bcm_sdio_3-b-plus
fi
if `grep -Fx "bcm2708" "/root/soc.txt" >/dev/null;`
	then bcm_sdio_zero-w
fi
cd ~
echo Done.

#### Extra firmware
extra_firmware

####
echo
echo Bluetooth udev rule.
sleep 1s
mkdir -p /lib/udev/rules.d/
mv -f 99-com.rules /lib/udev/rules.d/99-com.rules
echo Done.

### Network Setup
echo
echo Creating network configs.
sleep 1s
network_setup > /dev/null 2>&1
echo Done.

### ZSWAP
echo
echo Adjusting zramswap config.
sleep 1s
zramswap_config
echo Done.

### MOTD instructions
echo
echo Adding motd first boot.
sleep 1s
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd
echo Done.

#### Clean up packages
echo
echo Cleaning up.
sleep 1s
apt -y autoremove
apt -y clean
apt -y autoclean
echo Done.

###
echo
echo Adding regdb.
sleep 1s
apt update
apt install -y crda
git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/sforshee/wireless-regdb
echo
echo Moving db files.
sleep 1s
cd wireless-regdb
cp -f regulatory.db /lib/firmware/regulatory.db
cp -f regulatory.db.p7s /lib/firmware/regulatory.db.p7s
cd ~
rm -fdr wireless-regdb
echo Done.

### Adding sys-mods
echo
echo Building raspi-sys-mods package.
sleep 1s
apt install -y debhelper d-shlibs rfkill dosfstools psmisc
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
cd raspberrypi-sys-mods
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdR raspberrypi-sys-mods*
echo Removing vscode repo...
if ls /etc/apt/sources.list.d/vscode.list > /dev/null 2>&1
	then rm -f /etc/apt/sources.list.d/vscode.list;
fi
if ls /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null 2>&1
	then rm -f /etc/apt/trusted.gpg.d/microsoft.gpg;
fi
if ls /etc/apt/preferences.d/3rd_parties.pref > /dev/null 2>&1
	then rm -f /etc/apt/preferences.d/3rd_parties.pref;
fi
echo Done.

### Bluez firmware.
echo
echo Installing bluetooth.
sleep 1s
apt install -y bluetooth bluez bluez-tools
echo Done.
echo
bluez_firmware
echo Done.

### Pi Bluetooth
echo
echo Building pi bluetooth package.
sleep 1s
git clone https://github.com/pyavitz/pi-bluetooth.git
cd pi-bluetooth
chmod +x debian/rules
dpkg-buildpackage -us -uc
cd ~
dpkg -i pi-bluetooth_*.deb
rm -fdR pi-bluetooth*
echo Done.

### Upgrading bluez
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then bluez_choose
fi
if `grep -Fx "bcm2710" "/root/soc.txt" >/dev/null;`
	then bluez_choose
fi

### Cypress wifi firmware
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then : ;
	else cypress_firmware
fi

### Certificates
echo
update-ca-certificates -f

###  Raspi userland
rpi_userland

### Adding eeprom
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then bcm2711_eeprom
fi

#### Kernel
echo
echo Installing kernel.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo Done.
sleep 1s
fetch_version

### Modules
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then bcm_modules
fi
if `grep -Fx "bcm2710" "/root/soc.txt" >/dev/null;`
	then bcm2710_modules
fi
if `grep -Fx "bcm2708" "/root/soc.txt" >/dev/null;`
	then bcm_modules
fi

### Admin or user
case `grep -Fx "admin=1" "/root/userdata.txt" >/dev/null; echo $?` in
  0)
	admin_config
    ;;
  1)
	user_config
    ;;
esac

if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then eeprom_choose
fi

### Clean misc files
rm -f *.patch
rm -f *led*
rm -f *eeprom*

### RPi Hack
if `grep -Fx "bcm2708" "/root/soc.txt" >/dev/null;`
	then ln -s /lib/ld-linux.so.3 /lib/ld-linux-armhf.so.3
fi

### Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

#### Led switches
if `grep -Fx "bcm2711" "/root/soc.txt" >/dev/null;`
	then led_switches
fi
if `grep -Fx "bcm2710" "/root/soc.txt" >/dev/null;`
	then led_switches
fi

#### First boot service
firstboot_service

#### Credentials service
credentials_service

#### Governor service
governor_service

#### Create RC.LOCAL
echo
echo Creating rc.local file.
sleep 1s
tee /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF
tee /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# tmp wlan pwr mngt fix
iwconfig wlan0 power off

exit 0
EOF
chmod +x /etc/rc.local
echo Done.
### Enable services
echo
echo Enabling Services
sleep 1s
enable_services > /dev/null 2>&1
echo Done.

###### Finish
echo
echo Moving out of stage2 and creating image.
echo
sleep 2s

umount /proc /sys
